CREATE DATABASE JOINSQL
USE JOINSQL




CREATE TABLE STUDENT(
ID INT,
[NAME] NVARCHAR,
SURNAME NVARCHAR,
AGE INT
)
ALTER TABLE STUDENT
ADD SURNAME NVARCHAR(30)
INSERT INTO  STUDENT
VALUES(20,'Shahin','Melikov'),
(21,'Murad','Shikmatov')

CREATE TABLE STUDENTINFOS
(
ID INT PRIMARY KEY IDENTITY,
EMAIL VARCHAR(255) UNIQUE,
PHONE VARCHAR(30) ,
STUDENTID INT REFERENCES STUDENT(ID),

--FOREIGN KEY STUDENTID REFERENCES STUDENT(ID)



)
CREATE TABLE CONTRIES
(
ID INT PRIMARY KEY IDENTITY,
[NAME] NVARCHAR(30) UNIQUE,
POPULATION INT,
AREA DECIMAL(8,2)
)
--CREATE TABLE CITIES
--(
--ID INT PRIMARY KEY IDENTITY,
--[NAME] NVARCHAR(30) UNIQUE,
--POPULATION INT,
--AREA DECIMAL(8,2),
--CONTRYID INT REFERENCES CONTRIES(ID),
--)

-------INNER JOIN
--INNER JOIN CITIES
--ON CONTRIES.ID=CITIES.CONTRYID

------LEFT JOIN 
--SELECT ct.NAME'COUNTRY',cs.NAME 'CITY'
--FROM CONTRIES ct
--LEFT JOIN CITIES cs
--ON ct.ID=cs.CONTRYID

------- RIGHT JOINS 
--SELECT ct.NAME'COUNTRY',cs.NAME 'CITY'
--FROM CONTRIES ct
--RIGHT JOIN CITIES cs
--ON ct.ID=cs.CONTRYID

-------FULLOUTERJOIN
SELECT ct.NAME'COUNTRY',cs.NAME 'CITY'
FROM CONTRIES ct
FULL OUTER  JOIN CITIES cs
ON ct.ID=cs.CONTRYID

------NON EQUAL JOIN
SELECT c2.id, c2.NAME, c1.ID, c1.Name
FROM CITIES c1
INNER JOIN CONTRIES c2 ON c1.id <> c2.id




-------------------------Task2



CREATE DATABASE Library
use Library
CREATE TABLE BOOKS(
ID INT,
AUTHIRID INT,
[NAME] VARCHAR (100),
PAGECOUNT INT 

)

ALTER TABLE BOOKS
ADD ID INT primary key   IDENTITY


CREATE TABLE AUTHOR(
ID INT PRIMARY KEY IDENTITY,
NAME VARCHAR(30),
SURNAME VARCHAR(30))


---------------View
create view GETBOOKSVIEW
AS
Select a.ID,
	   a.NAME,
	   b.PAGECOUNT,
	   (a.NAME+a.SURNAME)'FullName'  
from BOOKS b
INNER JOIN	AUTHOR a
on a.ID=b.AUTHIRID

SELECT*FROM GETBOOKSVIEW    ----------------------1 yazici coxlu kitab yaza biler (a.id )





-------Procedure
create procedure GETBOOKSProcedure @Name varchar(30)
AS
Select a.ID,
	   a.NAME,
	   b.PAGECOUNT,
	   (a.NAME+a.SURNAME)'FullName'  
from BOOKS b
INNER JOIN	AUTHOR a
on a.ID=b.AUTHIRID
where a.Name=@Name

exec GETBOOKSProcedure qaraqan     -----------author da olan name olanlari getirsin


-------Function
CREATE FUNCTION   GETBOOKSFUNCTION (@MinCountPage INT=10)  RETURNS INT
AS
BEGIN
DECLARE @COUNTPAGE INT   ---------menimsetme 
SELECT  @COUNTPAGE=COUNT(*) from BOOKS where  PAGECOUNT>@MinCountPage  ------------ icra eden
RETURN @COUNTPAGE ------- geriye deyer qaytaran

END
SELECT dbo.GETBOOKSfUNCTION(60)


CREATE TABLE DELETEBOOKS(
 ID INT primary key   IDENTITY,
AUTHIRID INT,
[NAME] VARCHAR(30),
PAGECOUNT INT,
)
SELECT*FROM BOOKS


--CREATE TRIGGER GETBOOKSTRIGGET
--ON BOOKS
--AFTER DELETE,UPDATE,INSERT
--AS
--BEGIN
--SELECT*FROM BOOKS
--END

-----------------TIGGER


delete from BOOKS  where id=13
CREATE TRIGGER GETBOOKSTRIGGET
ON BOOKS
AFTER DELETE
AS
BEGIN
DECLARE @AUTHIRID INT
DECLARE @NAME VARCHAR(30)
DECLARE @PAGECOUNT INT

SELECT  @AUTHIRID=BOOKLIST.AUTHIRID,@NAME=BOOKLIST.NAME,@PAGECOUNT=BOOKLIST.PAGECOUNT FROM  DELETED BOOKLIST
INSERT INTO DELETEBOOKS VALUES(@AUTHIRID,@NAME,@PAGECOUNT)
END